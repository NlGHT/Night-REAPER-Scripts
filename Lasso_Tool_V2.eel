// ----- DEBUGGING ====>
@import ../../X-Raym Scripts/Functions/X-Raym_Functions - console debug messages.eel

debug = 1; // 0 => No console. 1 => Display console messages for debugging.
clean = 0; // 0 => No console cleaning before every script execution. 1 => Console cleaning before every script execution.

msg_clean();
// <==== DEBUGGING -----


/* Template and Script developed by Night */

/*

How it works:
1.  Create a sectioncode which should be completely unique.
	If not then it's probably not too much trouble unless another script uses the same Section Code AND a key with name "time".
	Otherwise just change every ExtState modification to what you want.
2.  Set a callstack rate, this is the delay(ms) after a key press until the script ends.
	By default this is set to 500 which appears to be the time taken for fast key input to sink in after initial press.
3.  Change the init_press() function for what to happen on the initial script run.
4.  Change what to run in the background with background_tasks().
5.  Change what to run after the key is released inside end_tasks().

The script's initial start time is stored within script_time, string format in str_script_time.

Feel free to message me with feedback, bugs and anything you do with it on Discord! @Night#5537

*/

sectioncode = "lasso_tool";
callstack_rate = 500;
callstack_rate_after_init = 20;





function getCharByPosition(posInString, inputString) local(posInString, inputString) (
	str_delsub(str_delsub(strcpy(#, inputString), 0, posInString), 1, strlen(inputString));
);

function substringByLength(posInString, smolStringlength, inputString) local(posInString, smolStringlength, inputString, outputString) (
	strlen(outputString = str_delsub(str_delsub(strcpy(#, inputString), 0, posInString), smolStringlength, strlen(inputString)-posInString)) < smolStringlength ? str_delsub(strcpy(#, inputString), 0, strlen(inputString)-smolStringlength) : outputString;
);

function substring(indexStart, indexEnd, inputString) local(indexStart, indexEnd, inputString, outputString, indexDistance) (
	strlen(outputString = str_delsub(str_delsub(strcpy(#, inputString), 0, indexStart), indexDistance = (min(indexEnd, strlen(inputString))-indexStart), strlen(inputString))) < indexDistance ? str_delsub(strcpy(#, inputString), 0, strlen(inputString)-(min(indexEnd, strlen(inputString)))) : outputString;
);

// Thankyou to Banned (https://forums.cockos.com/member.php?u=8512) on forums for getting float from string function https://forums.cockos.com/showthread.php?t=140211
function get_float_from_string(str)
(
    matchi("*?-*?%{float_value}f*?", str) ? ( // first, try to match for a negative value, i.e. a (series of) numeric character(s), *directly* preceded with '-' character)
        -float_value; // apply negative sign, return float value
    ) : ( // else, just try to match a (positive) value, i.e. a (series of) numeric character(s)
        matchi("*?%{float_value}f*?", str) ? 
        (
            float_value; // return float value
        );
    );
);

function get_int_from_string(str)
(
    matchi("*?-*?%{float_value}d*?", str) ? ( // first, try to match for a negative value, i.e. a (series of) numeric character(s), *directly* preceded with '-' character)
        -float_value; // apply negative sign, return float value
    ) : ( // else, just try to match a (positive) value, i.e. a (series of) numeric character(s)
        matchi("*?%{float_value}d*?", str) ? 
        (
            float_value; // return float value
        );
    );
);

function getStringFromFloat(float) (
	sprintf(#, "%f", float);
);

function getStringFromInt(int) (
	sprintf(#, "%d", int);
);




function saveTrackAndMousePosition() local(tr) (
	extension_api("BR_GetMouseCursorContext", #window, #segment, #details, 50);

	mouse_pos = extension_api("BR_GetMouseCursorContext_Position");

	mouse_pos >= 0 ? ( // Mouse in in arrange view
		tr = extension_api("BR_GetMouseCursorContext_Track");
  		tr ? (
  			track_number = GetMediaTrackInfo_Value(tr, "IP_TRACKNUMBER");
  			string_track_number = sprintf(#, "%f", track_number);
  			i = 0;
  			loop(strlen(string_track_number),
  				strcmp(getCharByPosition(i, string_track_number), ".") == 0 ? (
  					just_track_number = substring(0, i, string_track_number);
 				);
  				i+=1;
  			);
  			string_mouse_pos = sprintf(#, "%f", mouse_pos);
  			msg_s(just_track_number);
  			HasExtState(lasso_tool, just_track_number) ? (
  				GetExtState(#savedTimesForTrack, lasso_tool, just_track_number);
  				#savedTimesForTrack = strcat(#savedTimesForTrack, string_mouse_pos);
  				#savedTimesForTrack = strcat(#savedTimesForTrack, ",");
  				msg_s("Track Exists");
  				msg_s(#savedTimesForTrack);
  				SetExtState(lasso_tool, just_track_number, #savedTimesForTrack, 0);
  			):(
  				string_mouse_pos = strcat(string_mouse_pos, ",");
  				msg_s("Track doesn't exist");
  				msg_s(string_mouse_pos);
  				msg_s(just_track_number);
  				SetExtState(lasso_tool, just_track_number, string_mouse_pos, 0);
  			);
  		);
	);
);





function init_press() (

	saveTrackAndMousePosition();

	SetExtState("lasso_tool_press_status", "init", "pressed", 0);
);

function background_tasks() (
	HasExtState("lasso_tool_press_status", "init") ? (
		callstack_rate = callstack_rate_after_init;
		DeleteExtState("lasso_tool_press_status", "init", 1);
	);
	saveTrackAndMousePosition();
);

function end_tasks() local(tr) (
	trackCount = CountTracks(0);

	i = 0;
	loop(trackCount,
		HasExtState(lasso_tool, stringTrack = getStringFromInt(i)) ? (
			msg_s("Selected track loop");
			GetExtState(#allTrackMousePositions, lasso_tool, stringTrack);
			j = 0;
			latestCommaPosition = 0;
			countCommas = 0;
			biggestMousePosition = 0;
			smallesMousePosition = 0;
			loop(strlen(#allTrackMousePositions),
				strcmp(getCharByPosition(j, #allTrackMousePositions), ",") == 0 ? (



					previousCommaPosition = latestCommaPosition+1;
					latestCommaPosition = j;
					countCommas > 0 ? (
						// For some reason the substring function was messing up the first seperation
						mousePosInArray = substring(previousCommaPosition, latestCommaPosition, #allTrackMousePositions);
					):(
						mousePosInArray = substring(0, latestCommaPosition, #allTrackMousePositions);
					);

					biggestMousePosition = max(biggestMousePosition, get_float_from_string(mousePosInArray));
					smallesMousePosition = min(smallesMousePosition, get_float_from_string(mousePosInArray));

					countCommas += 1;
				);
				j += 1;
			);

			//DeleteExtState(lasso_tool, stringTrack, 1);

			tr = GetTrack(0, i);
			CountTrackMediaItems(tr) > 0 ? (
				k = 0;
				loop(CountTrackMediaItems(tr),
					msg_d(k);
					item = GetTrackMediaItem(tr, k);
					itemStart = GetMediaItemInfo_Value(item, "D_POSITION");
					itemEnd = itemStart + GetMediaItemInfo_Value(item, "D_LENGTH");
					biggestMousePosition == 0 ? (
						biggestMousePosition = smallesMousePosition;
					);
					smallesMousePosition == 0 ? (
						smallesMousePosition = biggestMousePosition;
					);

					smallesMousePosition <= itemStart || biggestMousePosition >= itemEnd ? (
						SetMediaItemInfo_Value(item, "B_UISEL", 1);
					);
				);
			);
		);

		i += 1;
	);
	msg_s("Updated!");

	UpdateArrange();
);








function checkCallstack(ms) local(saved_time_after, floatSavedTimeAfter, ms) (
	ms /= 1000;
	time_precise() - script_time < ms ? (
		GetExtState(saved_time_after, sectioncode, "time");
		floatSavedTimeAfter = get_float_from_string(saved_time_after);
		script_time == floatSavedTimeAfter ? (
			defer("checkCallstack(callstack_rate)");
		):(
			background_tasks();
		);
	):(
		GetExtState(saved_time_after, sectioncode, "time");
		floatSavedTimeAfter = get_float_from_string(saved_time_after);
		script_time == floatSavedTimeAfter ? (
			DeleteExtState(sectioncode, "time", 1);
			end_tasks();
		):(
			background_tasks();
		);
	);
);


time_precise(script_time);

sprintf(str_script_time, "%f", script_time);


// Check ExtStates

HasExtState(sectioncode, "time") ? (
	SetExtState(sectioncode, "time", str_script_time, 0);
	defer("checkCallstack(callstack_rate)");
):(
	SetExtState(sectioncode, "time", str_script_time, 0);
	init_press();
	defer("checkCallstack(callstack_rate)");
);