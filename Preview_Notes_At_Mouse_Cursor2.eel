// based on EEL script 6.9.2014 by spk77

// Link to forum post by kuus0 https://forum.cockos.com/showthread.php?t=146114


// ----- DEBUGGING ====>
@import ../X-Raym Scripts/Functions/X-Raym_Functions - console debug messages.eel

debug = 0; // 0 => No console. 1 => Display console messages for debugging.
clean = 0; // 0 => No console cleaning before every script execution. 1 => Console cleaning before every script execution.

msg_clean();
// <==== DEBUGGING -----
function preview_notes_under_edit_cursor() local(take, note_count, break, index, start_pos)
(
	msg_s("Preview notes under edit cursor() called");
  buf = 10000;
  (take = MIDIEditor_GetTake(MIDIEditor_GetActive())) ? (
    MIDI_CountEvts(take, note_count, 0, 0);
    index = 0;
    off = 1;
    extension_api("BR_GetMouseCursorContext", #window, #segment, #details, char_sz);
	cursor_pos = extension_api("BR_GetMouseCursorContext_Position");
    break = 0;
    while(break === 0 && index < note_count) (
		MIDI_GetNote(take, index, sel, muted, start_pos, end_pos, chan, pitch, velOut);
		(MIDI_GetProjTimeFromPPQPos(take, start_pos) > cursor_pos) ? (
				break = 1;
			):
			(
				(MIDI_GetProjTimeFromPPQPos(take, end_pos) > cursor_pos) ? (
					buf[off] = chan;
					buf[off+1] = pitch;
					buf[off+2] = velOut;
					off += 3;
				);
			); 
      index += 1;
    );
    
    buf_len = off - 1;
    buf[0] = buf_len;
    i = 1;
    loop(buf_len / 3,
      StuffMIDIMessage(0, 144 + buf[i], buf[i + 1], buf[i + 2]);
      i += 3;
    );
	

   Undo_OnStateChange("Preview notes under edit cursor.");
  );
);

function send_note_offs() (
	msg_s("send_note_offs() called");
    buf = 10000;
	buf_len = buf[0];
	i = 1;
    loop(buf_len / 3,
      StuffMIDIMessage(0, 128 + buf[i], buf[i + 1],0);
      i += 3;
    );
);

function maybe_stop_notes() (
	stop_time = (9000)[0];
	time_precise(cur_time);
	(stop_time > cur_time) ? (
	defer("maybe_stop_notes();");
	):
	(send_note_offs());
);



function get_float_from_string(str)
(
    matchi("*?-*?%{float_value}f*?", str) ? ( // first, try to match for a negative value, i.e. a (series of) numeric character(s), *directly* preceded with '-' character)
        -float_value; // apply negative sign, return float value
    ) : ( // else, just try to match a (positive) value, i.e. a (series of) numeric character(s)
        matchi("*?%{float_value}f*?", str) ? 
        (
            float_value; // return float value
        );
    );
);

function get_int_from_string(str)
(
    matchi("*?-*?%{float_value}d*?", str) ? ( // first, try to match for a negative value, i.e. a (series of) numeric character(s), *directly* preceded with '-' character)
        -float_value; // apply negative sign, return float value
    ) : ( // else, just try to match a (positive) value, i.e. a (series of) numeric character(s)
        matchi("*?%{float_value}d*?", str) ? 
        (
            float_value; // return float value
        );
    );
);

function getStringFromFloat(float) (
	sprintf(#, "%f", float);
);


function checkCallstack(ms) local(saved_time_after) (
	msg_s("checkCallstack()");
	ms /= 1000;
	time_precise() - script_time < ms ? (
		//msg_f(time_precise()-script_time);

		GetExtState(saved_time_after1, sectioncode, "time");
		floatSavedTimeAfter1 = get_float_from_string(saved_time_after1);
		//msg_f(floatSavedTimeAfter1);
		script_time == floatSavedTimeAfter1 ? (
			defer("checkCallstack(callstack_rate)");
		);
	):(
		// This runs after the delay time
		GetExtState(saved_time_after, sectioncode, "time");
		floatSavedTimeAfter = get_float_from_string(saved_time_after);
		msg_f(floatSavedTimeAfter);
		script_time == floatSavedTimeAfter ? (
			send_note_offs();
			DeleteExtState(sectioncode, "time", 1);
			msg_s("Saved time equal to script");
		):(
			// Button up
			// Don't send note offs because another script has started
			msg_s("Saved time is not equal to the script");
		);
	);
);

/*
function getTimeFromExtState() (

)
*/

Undo_BeginBlock2(0);

sectioncode = "90009";
callstack_rate = 200;
time_precise(script_time);
//msg_f(script_time);

sprintf(str_script_time, "%f", script_time);
//ShowConsoleMsg(strcat(getStringFromFloat(script_time), "\n"));
//msg_f(intScriptTime);

//msg_s(str_script_time);

itemsselected = CountSelectedMediaItems(0);
itemsselected != 1 ? (
	ShowMessageBox("No items selected LOL", "Preview Notes Script", 0);
	// Not just 1 selected media item
):(
	item = GetSelectedMediaItem(0, 0);
	tr = GetMediaItemTrack(item);

	// Arm track
	GetMediaTrackInfo_Value(tr, "I_RECARM") < 1 ? (
		SetMediaTrackInfo_Value(tr, "I_RECARM", 1);
	);

	// Insert the All MIDI Channels shit
	GetMediaTrackInfo_Value(tr, "I_RECINPUT") != 6112 ? (
		SetMediaTrackInfo_Value(tr, "I_RECINPUT", 6112);
	);

	GetMediaTrackInfo_Value(tr, "I_RECMON") == 0 ? (
		SetMediaTrackInfo_Value(tr, "I_RECMON", 2);
	);

	// Check ExtStates
	
	HasExtState(sectioncode, "time") ? (
		GetExtState(saved_time, sectioncode, "time");
		floatSavedTime = get_float_from_string(saved_time);
		msg_f(floatSavedTime);
		script_time > floatSavedTime ? (
			msg_s("Script time greater than saved time");
			
		):(
			// Don't send note offs because another script has started
			DeleteExtState(sectioncode, "time", 0);
			SetExtState(sectioncode, "time", str_script_time, 0);
			preview_notes_under_edit_cursor();
			defer("checkCallstack(callstack_rate)");
			msg_s("Script time is less than or equal to the saved time");
		);
	):(
		DeleteExtState(sectioncode, "time", 0);
		SetExtState(sectioncode, "time", str_script_time, 0);
		preview_notes_under_edit_cursor();
		msg_s("No ExtState saved");
		defer("checkCallstack(callstack_rate)");
	);

	//DeleteExtState(sectioncode, "time", 0);
	//SetExtState(sectioncode, "time", str_script_time, 0);

	/*time_precise(cur_time);
	(9000)[0] = cur_time + 0.3;
	maybe_stop_notes();*/

	//sleep(20);

	//send_note_offs();
);

Undo_EndBlock2(0, "undo name", -1);